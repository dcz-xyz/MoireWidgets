/*    
    Spur Gear - Neil Cooke, Onshape Inc.
    
    This custom feature creates mathematically correct 
    spur gears with optional center bore hole and keyway.

    Version 1 - May 22, 2016 
    Version 2 - April 5, 2017
*/    

FeatureScript 531;
import(path : "onshape/std/geometry.fs", version : "531.0");

annotation { "Feature Type Name" : "Spur Gear", "Feature Name Template" : "Spur Gear (#teeth teeth)", "Editing Logic Function" : "editGearLogic" }
export const SpurGear = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Number of teeth" }
        isInteger(definition.numTeeth, TEETH_BOUNDS);

        annotation { "Name" : "Input type" }
        definition.GearInputType is GearInputType;

        if (definition.GearInputType == GearInputType.module)
        {
            annotation { "Name" : "Module" }
            isLength(definition.module, MODULE_BOUNDS);
        }

        if (definition.GearInputType == GearInputType.diametralPitch)
        {
            annotation { "Name" : "Diametral pitch" }
            isReal(definition.diametralPitch, POSITIVE_REAL_BOUNDS);
        }

        if (definition.GearInputType == GearInputType.circularPitch)
        {
            annotation { "Name" : "Circular pitch" }
            isLength(definition.circularPitch, LENGTH_BOUNDS);
        }

        annotation { "Name" : "Pitch circle diameter" }
        isLength(definition.pitchCircleDiameter, LENGTH_BOUNDS);

        annotation { "Name" : "Pressure angle" }
        isAngle(definition.pressureAngle, PRESSURE_ANGLE_BOUNDS);

        annotation { "Name" : "Root fillet type", "Default" : RootFilletType.third }
        definition.rootFillet is RootFilletType;

        annotation { "Name" : "Center bore" }
        definition.centerHole is boolean;

        if (definition.centerHole)
        {
            annotation { "Name" : "Bore diameter" }
            isLength(definition.centerHoleDia, CENTERHOLE_BOUNDS);

            annotation { "Name" : "Keyway" }
            definition.key is boolean;

            if (definition.key)
            {
                annotation { "Name" : "Key width" }
                isLength(definition.keyWidth, KEY_BOUNDS);

                annotation { "Name" : "Key height" }
                isLength(definition.keyHeight, KEY_BOUNDS);
            }
        }

        annotation { "Name" : "Select origin position" }
        definition.centerPoint is boolean;

        if (definition.centerPoint)
        {
            annotation { "Name" : "Sketch vertex for center", "Filter" : EntityType.VERTEX && SketchObject.YES, "MaxNumberOfPicks" : 1 }
            definition.center is Query;
        }

        annotation { "Name" : "Extrude depth" }
        isLength(definition.gearDepth, BLEND_BOUNDS);

        annotation { "Name" : "Extrude direction", "UIHint" : "OPPOSITE_DIRECTION" }
        definition.flipGear is boolean;

        annotation { "Name" : "Offset" }
        definition.offset is boolean;

        if (definition.offset)
        {
            annotation { "Name" : "Root diameter" }
            isLength(definition.offsetClearance, ZERO_DEFAULT_LENGTH_BOUNDS);

            annotation { "Name" : "Dedendum factor", "Default" : DedendumFactor.d250 }
            definition.dedendumFactor is DedendumFactor;

            annotation { "Name" : "Outside diameter" }
            isLength(definition.offsetDiameter, ZERO_DEFAULT_LENGTH_BOUNDS);

            annotation { "Name" : "Tooth angle" }
            isAngle(definition.offsetAngle, ANGLE_360_ZERO_DEFAULT_BOUNDS);
        }
    }

    {
        // println(definition.numTeeth);
        // diameters in gear definition
        var offsetDiameter = 0 * meter;
        var offsetClearance = 0 * meter;
        var offsetAngle = 0 * degree;

        if (definition.offset)
        {
            offsetDiameter = definition.offsetDiameter;
            offsetClearance = definition.offsetClearance;
            offsetAngle = definition.offsetAngle;
        }

        if (definition.centerHole && definition.centerHoleDia >= definition.pitchCircleDiameter - 4 * definition.module)
        {
            throw regenError("Center hole diameter must be less than the root diameter", ["centerHoleDia"]);
        }

        if (definition.key && definition.keyHeight / 2 + definition.centerHoleDia >= definition.pitchCircleDiameter - 4 * definition.module)
        {
            throw regenError("Center hole diameter plus Key height must be less than the root diameter", ["keyHeight"]);
        }

        var dedendumFactor = 1.25;

        if (definition.dedendumFactor == DedendumFactor.d157)
            dedendumFactor = 1.157;

        if (definition.dedendumFactor == DedendumFactor.d200)
            dedendumFactor = 1.2;

        const addendum = definition.module + offsetDiameter;
        const dedendum = dedendumFactor * definition.module + offsetClearance;
        const base = definition.pitchCircleDiameter * cos(definition.pressureAngle);

        // angle between root of teeth
        const alpha = sqrt(definition.pitchCircleDiameter ^ 2 - base ^ 2) / base * radian - definition.pressureAngle;
        const beta = 360 / (4 * definition.numTeeth) * degree - alpha;

        // if no center vertex selected build gear on the front plane at the origin
        var location = vector(0, 0, 0) * meter;
        var sketchPlane = plane(location, vector(0, -1, 0), vector(1, 0, 0));

        // else find location of selected vertex and its sketch plane and create a new sketch for the gear profile
        if (definition.centerPoint)
        {
            location = evVertexPoint(context, { "vertex" : definition.center });
            sketchPlane = evOwnerSketchPlane(context, { "entity" : definition.center });
        }

        const gearSketch = newSketchOnPlane(context, id + "gearSketch", { "sketchPlane" : sketchPlane });
        const center = worldToPlane(sketchPlane, location);

        // create the outer diameter circle
        skCircle(gearSketch, "addendum", { "center" : center, "radius" : definition.pitchCircleDiameter / 2 + addendum });

        if (definition.centerHole)
        {
            if (definition.key)
            {
                var keyVector = vector(0, 1);
                var perpKeyVector = vector(-1, 0);
                var keyHeight = (definition.keyHeight + definition.centerHoleDia) / 2;

                var points = [
                    center - (definition.keyWidth / 2) * perpKeyVector,
                    center - (definition.keyWidth / 2) * perpKeyVector + keyHeight * keyVector,
                    center + (definition.keyWidth / 2) * perpKeyVector + keyHeight * keyVector,
                    center + (definition.keyWidth / 2) * perpKeyVector];

                for (var i = 0; i < size(points); i += 1)
                {
                    skLineSegment(gearSketch, "line" ~ i, { "start" : points[i], "end" : points[(i + 1) % size(points)] });
                }
            }

            // center hole circle sketch
            skCircle(gearSketch, "Center", {
                        "center" : center,
                        "radius" : definition.centerHoleDia / 2
                    });
        }
        skSolve(gearSketch);

        opExtrude(context, id + "extrude1", {
                    "entities" : qSketchRegion(id + "gearSketch", true),
                    "direction" : sketchPlane.normal * (definition.flipGear ? -1 : 1),
                    "endBound" : BoundingType.BLIND,
                    "endDepth" : definition.gearDepth
                });

        const toothSketch = newSketchOnPlane(context, id + "toothSketch", { "sketchPlane" : sketchPlane });

        // build involute splines for each tooth
        var involute1 = [];
        var involute2 = [];

        for (var t = 0; t <= 2; t += (1 / 20)) // (1/20) is the involute spline tolerance
        {
            // involute definition math
            var angle = t * radian;
            var offset = beta + offsetAngle;
            var ca = cos(angle + offset);
            var sa = sin(angle + offset);
            var cab = cos(offset - beta * 2 - angle);
            var sab = sin(offset - beta * 2 - angle);
            var point1;
            var point2;

            if (base >= definition.pitchCircleDiameter - 2 * dedendum && t == 0) // special case when base cylinder diameter is greater than dedendum
            {
                // calculate involute spline point
                point1 = vector((definition.pitchCircleDiameter / 2 - dedendum) * ca, (definition.pitchCircleDiameter / 2 - dedendum) * sa);
                point2 = vector((definition.pitchCircleDiameter / 2 - dedendum) * cab, (definition.pitchCircleDiameter / 2 - dedendum) * sab);
            }
            else
            {
                point1 = vector(base * 0.5 * (ca + t * sa), base * 0.5 * (sa - t * ca));
                point2 = vector(base * 0.5 * (cab - t * sab), base * 0.5 * (sab + t * cab));
            }

            // and add to array
            involute1 = append(involute1, point1 + center);
            involute2 = append(involute2, point2 + center);

            // if involute points go outside the outer diameter of the gear then stop
            if (sqrt(point1[0] ^ 2 + point1[1] ^ 2) >= (definition.pitchCircleDiameter / 2 + addendum))
                break;
        }

        // create involute sketch splines
        skFitSpline(toothSketch, "spline1", { "points" : involute1 });
        skFitSpline(toothSketch, "spline2", { "points" : involute2 });

        const regionPoint = center + vector((definition.pitchCircleDiameter / 2) * cos(offsetAngle), (definition.pitchCircleDiameter / 2) * sin(offsetAngle));

        skCircle(toothSketch, "addendum", { "center" : center, "radius" : definition.pitchCircleDiameter / 2 + addendum });
        skCircle(toothSketch, "dedendum", { "center" : center, "radius" : definition.pitchCircleDiameter / 2 - dedendum });
        skCircle(toothSketch, "fillet", { "center" : regionPoint, "radius" : 1 * millimeter, "construction" : true });

        skConstraint(toothSketch, "fix1", { "constraintType" : ConstraintType.FIX, "localFirst" : "dedendum" });
        skConstraint(toothSketch, "fix2", { "constraintType" : ConstraintType.FIX, "localFirst" : "spline1" });
        skConstraint(toothSketch, "fix3", { "constraintType" : ConstraintType.FIX, "localFirst" : "spline2" });
        skConstraint(toothSketch, "tangent1", { "constraintType" : ConstraintType.TANGENT, "localFirst" : "fillet", "localSecond" : "dedendum" });
        skConstraint(toothSketch, "tangent2", { "constraintType" : ConstraintType.TANGENT, "localFirst" : "fillet", "localSecond" : "spline1" });
        skConstraint(toothSketch, "tangent3", { "constraintType" : ConstraintType.TANGENT, "localFirst" : "fillet", "localSecond" : "spline2" });

        skSolve(toothSketch);

        opExtrude(context, id + "tooth", {
                    "entities" : qContainsPoint(qCreatedBy(id + "toothSketch", EntityType.FACE), planeToWorld(sketchPlane, regionPoint)),
                    "direction" : sketchPlane.normal * (definition.flipGear ? -1 : 1),
                    "endBound" : BoundingType.BLIND,
                    "endDepth" : definition.gearDepth
                });

        const filletEdges = qClosestTo(qGeometry(qCreatedBy(id + "tooth", EntityType.EDGE), GeometryType.LINE), location);

        var rootFilletRadius = evCurveDefinition(context, { "edge" : sketchEntityQuery(id + "toothSketch", EntityType.EDGE, "fillet") }).radius;

        if (definition.rootFillet == RootFilletType.none)
            rootFilletRadius = 0;

        if (definition.rootFillet == RootFilletType.third)
            rootFilletRadius /= 1.5;

        if (definition.rootFillet == RootFilletType.quarter)
            rootFilletRadius /= 2;

        if (rootFilletRadius > 0)
        {
            opFillet(context, id + "fillet", { "entities" : filletEdges, "radius" : rootFilletRadius });
        }

        var tools = qCreatedBy(id + "tooth", EntityType.BODY);
        var transforms = [];
        var instanceNames = [];

        for (var i = 1; i < definition.numTeeth; i += 1)
        {
            var instanceTransform = rotationAround(line(location, sketchPlane.normal), i * (360 / definition.numTeeth) * degree);
            transforms = append(transforms, instanceTransform);
            instanceNames = append(instanceNames, "" ~ i);
        }

        opPattern(context, id + "pattern", {
                    "entities" : tools,
                    "transforms" : transforms,
                    "instanceNames" : instanceNames
                });

        opBoolean(context, id + "hobbed", {
                    "tools" : qUnion([tools, qCreatedBy(id + "pattern", EntityType.BODY)]),
                    "targets" : qCreatedBy(id + "extrude1", EntityType.BODY),
                    "operationType" : BooleanOperationType.SUBTRACTION
                });

        // Remove sketch entities - no longer required
        opDeleteBodies(context, id + "delete", { "entities" : qUnion([qCreatedBy(id + "gearSketch"), qCreatedBy(id + "toothSketch")]) });

        // created PCD sketch
        const PCDSketch = newSketchOnPlane(context, id + "PCDsketch", { "sketchPlane" : sketchPlane });

        skCircle(PCDSketch, "PCD", {
                    "center" : center,
                    "radius" : definition.pitchCircleDiameter / 2,
                    "construction" : true
                });

        skSolve(PCDSketch);

        setFeatureComputedParameter(context, id, { "name" : "teeth", "value" : definition.numTeeth });
    });

export function editGearLogic(context is Context, id is Id, oldDefinition is map, definition is map, isCreating is boolean, specifiedParameters is map, hiddenBodies is Query) returns map
{
    // isCreating is required in the function definition for edit logic to work when editing an existing feature
    if (oldDefinition.numTeeth != definition.numTeeth)
    {
        definition.module = definition.pitchCircleDiameter / definition.numTeeth;
        definition.circularPitch = definition.module * PI;
        definition.diametralPitch = 1 * inch / definition.module;
        return definition;
    }

    if (oldDefinition.circularPitch != definition.circularPitch)
    {
        definition.module = definition.circularPitch / PI;
        definition.pitchCircleDiameter = (definition.circularPitch * definition.numTeeth) / PI;
        definition.diametralPitch = 1 * inch / definition.module;
        return definition;
    }

    if (oldDefinition.pitchCircleDiameter != definition.pitchCircleDiameter)
    {
        definition.module = definition.pitchCircleDiameter / definition.numTeeth;
        definition.circularPitch = (PI * definition.pitchCircleDiameter) / definition.numTeeth;
        definition.diametralPitch = 1 * inch / definition.module;
        return definition;
    }

    if (oldDefinition.module != definition.module)
    {
        definition.circularPitch = definition.module * PI;
        definition.pitchCircleDiameter = definition.numTeeth * definition.module;
        definition.diametralPitch = 1 * inch / definition.module;
        return definition;
    }

    if (oldDefinition.diametralPitch != definition.diametralPitch)
    {
        definition.circularPitch = PI / (definition.diametralPitch / inch);
        definition.module = definition.circularPitch / PI;
        definition.pitchCircleDiameter = (definition.circularPitch * definition.numTeeth) / PI;
        return definition;
    }

    return definition;
}

export const TEETH_BOUNDS =
{
            (unitless) : [4, 25, 250]
        } as IntegerBoundSpec;

export const PRESSURE_ANGLE_BOUNDS =
{
            (degree) : [12, 20, 35]
        } as AngleBoundSpec;

export const MODULE_BOUNDS =
{
            (meter) : [1e-5, 0.001, 500],
            (centimeter) : 0.1,
            (millimeter) : 1.0,
            (inch) : 0.04
        } as LengthBoundSpec;

export const CENTERHOLE_BOUNDS =
{
            (meter) : [1e-5, 0.01, 500],
            (centimeter) : 1.0,
            (millimeter) : 10.0,
            (inch) : 0.375
        } as LengthBoundSpec;

export const KEY_BOUNDS =
{
            (meter) : [1e-5, 0.003, 500],
            (centimeter) : 0.3,
            (millimeter) : 3.0,
            (inch) : 0.125
        } as LengthBoundSpec;

export enum GearInputType
{
    annotation { "Name" : "Module" }
    module,
    annotation { "Name" : "Diametral pitch" }
    diametralPitch,
    annotation { "Name" : "Circular pitch" }
    circularPitch
}

export enum RootFilletType
{
    annotation { "Name" : "No root fillet" }
    none,
    annotation { "Name" : "1/4 root fillet" }
    quarter,
    annotation { "Name" : "1/3 root fillet" }
    third,
    annotation { "Name" : "Full root fillet" }
    full
}

export enum DedendumFactor
{
    annotation { "Name" : "1.157 x addendum" }
    d157,
    annotation { "Name" : "1.20 x addendum" }
    d200,
    annotation { "Name" : "1.25 x addendum" }
    d250
}
